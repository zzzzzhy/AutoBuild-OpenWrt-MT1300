# Fork from P3TERX's GitHub Actions, modified by Wason Fok on Sep 26, 2021
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build MT1300 from GL-iNet

on:
  
  # SSH
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection to Actions'
        required: false
        default: 'false'

  repository_dispatch:

  #release:
  #  types: [published]

  push:
    branches:
      - main
    paths:
      - 'config/.config.gl'
      - 'customize/create-plugin-package.sh'
      - 'customize/customize-feeds-gl.sh'

  #schedule:
  #  - cron: 0 8 * * 5

  #watch:
  #  types: [started]

env:
  # GL-inet OpenWrt
  REPO_OP_GL: https://github.com/gl-inet/openwrt.git
  REPO_OP_GL_BRANCH: openwrt-19.07.7
  # Lede Openwrt
  REPO_OP_LEDE: https://github.com/coolsnowwolf/lede
  REPO_OP_LEDE_BRANCH: master
  # Customize Script
  CUSTOM_FEEDS: customize/customize-feeds-gl.sh
  CUSTOM_CONFIG: customize/customize-config.sh
  # GL-inet OpenWrt .config
  CONFIG_FILE: config/.config.gl
  # TimeZone
  TZ: Asia/Shanghai
  # Upload settings
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_PLUGIN: true
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    # 初始化环境
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y purge \
        ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
        rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        echo "Installing dependent packages, please wait..."
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    # Clone GL-inet 和 lede OpenWrt 到 workdir 目录下，并进行连接
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo "Clone Lede & GL-inet OpenWrt source"
        git clone $REPO_OP_GL -b $REPO_OP_GL_BRANCH openwrt
        git clone $REPO_OP_LEDE -b $REPO_OP_LEDE_BRANCH lede
        echo "Link Buildroot to workdir"
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede
        
    # Update GL-inet OpenWrt feeds
    - name: Update and install OpenWrt feeds
      run: |
        cd /workdir/openwrt
        echo "Update and Install GL-inet OpenWrt feeds, please waiting..."
        ./scripts/feeds update -a && ./scripts/feeds install -a

    # # Update LEDE feeds
    - name: Update and install LEDE feeds
      run: |
        cd /workdir/lede
        echo "Update and Install Lede OpenWrt feeds, please waiting..."
        ./scripts/feeds update -a && ./scripts/feeds install -a
        
    # 加载自定义 feeds 
    - name: Load custom feeds
      run: |
        chmod +x $CUSTOM_FEEDS
        cd openwrt
        $GITHUB_WORKSPACE/$CUSTOM_FEEDS

    # 修复编译错误
    - name: Fix compile issue
      run: |
        cd /workdir/openwrt/staging_dir/host/bin
        ln -s /usr/bin/upx upx
        ln -s /usr/bin/upx-ucl upx-ucl
        ls -l upx*
        echo "Copy Lede feeds/packages/lang/golang To GL-inet"
        rm -rf /workdir/openwrt/feeds/packages/lang/golang
        cp -r /workdir/lede/feeds/packages/lang/golang /workdir/openwrt/feeds/packages/lang/golang
    
    # 加载自定义 .config
    - name: Load custom configuration
      run: |
        echo "Move customize config file to GL-inet OpenWrt"
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $CUSTOM_CONFIG
        cd openwrt
        $GITHUB_WORKSPACE/$CUSTOM_CONFIG
    
    # 启用 SSH 连接
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    # 下载 package
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # 编译固件
    - name: Compile the firmware
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        # make package/feeds/luci/luci-base/compile V=s
        # make -j$(nproc) V=s
        # make -j1
        # make -j1 V=s
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    # 检查磁盘使用空间
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    # 上传 bin 目录
    - name: Upload bin directory
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # 整理需要单独导出的插件
    - name: Organize plugin
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: plugin
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd /workdir/openwrt
        tar -czvf /workdir/OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.tar.gz bin
        if [ -e "$GITHUB_WORKSPACE/customize/create-plugin-package.sh" ]
        then
            chmod +x $GITHUB_WORKSPACE/customize/create-plugin-package.sh
            $GITHUB_WORKSPACE/customize/create-plugin-package.sh
        fi
        echo "::set-output name=status::success"

    # 上传 Plugin 包
    - name: Upload plugin package
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: pack
      uses: actions/upload-artifact@main
      if: steps.plugin.outputs.status == 'success' && env.UPLOAD_PLUGIN == 'true' && !cancelled()
      with:
        name: MT1300-Plugin-${{ env.FILE_DATE }}
        path: /workdir/mt1300-plugin.tar.gz
        
    # 整理固件目录
    - name: Organize Firmware
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: organize
      if: steps.plugin.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
    
    # 上传固件目录
    - name: Upload firmware directory
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # 上传 .config 文件
    - name: Upload .config file
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: actions/upload-artifact@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh') && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: .config
        path: /workdir/openwrt/.config

    # 生成 release 标签
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"

    # 上传到 release
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*
          /workdir/mt1300-plugin.tar.gz
          /workdir/OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.tar.gz
    
    # 清理大于 30 天的工作流 但最少保留 10 个
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        retain_days: 30
        keep_minimum_runs: 10
    
    # 最少保留 10 个 release 版本 并删除与旧版本关联的 tag
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
